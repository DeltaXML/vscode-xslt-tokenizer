<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xerces="http://xerces.apache.org"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           elementFormDefault="qualified"
           version="1.0">
  
      <!--
        Auto-generated Schema v1.0 conversion of: 
        'document-comparator-dxp.xsd' by 'generate-dcp-common.xsl'.
        Changes to the schema should be made on the original source file.
    -->

  

  <xs:annotation>
      <xs:documentation> Schema definitions for the DeltaXML DocumentComparator Pipeline (dcp). The
      root element is 'documentComparator'. </xs:documentation>
  </xs:annotation>

  <!-- //////// xsl:include of 'common-dxp.xsd' starts ////////-->


  <xs:element name="lexicalPreservation">
      <xs:annotation>
         <xs:documentation>Configures the way lexical information is preserved. This is mostly for lexical artifacts that
      are not included in the standards for the XPath Data Model or XML Infoset. The exceptions are
      comment and processing-instruction nodes that are controlled here also.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="defaults"/>       
            <xs:element ref="overrides" minOccurs="0"/>          
         </xs:sequence>           
      </xs:complexType>
  </xs:element>
   <xs:element name="overrides">
      <xs:annotation>
         <xs:documentation>Container for elements that override defaults for specific lexical preservation artifacts</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="preserveItems" minOccurs="0"/>
            <xs:element ref="outerPiAndCommentProcessingMode" minOccurs="0"/>
            <xs:element ref="advancedEntityReferenceUsage" minOccurs="0"/>
         </xs:all>
      </xs:complexType>
  </xs:element>
   <xs:element name="defaults" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>This required element is the container for elements that set the defaults for all lexical preservation artifacts.</xs:documentation>
      </xs:annotation>
  </xs:element>
   <xs:element name="preserveItems">
      <xs:annotation>
         <xs:documentation>Container for preservation of specific lexical preservation artifacts, these override general preservation settings
      for all artifacts contained in the 'defaults' element.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="CDATA" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="comments" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="defaultAttributeInfo" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="entityReferences" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="doctype" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="entityReplacementText" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="contentModel" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="documentLocation" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="ignorableWhitespace" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="nestedEntityReferences" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="processingInstructions" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="XMLDeclaration" minOccurs="0" maxOccurs="1"/>
         </xs:all>
      </xs:complexType>
  </xs:element>
   <xs:element name="advancedEntityReferenceUsage">
      <xs:annotation>
         <xs:documentation>For controlling some specialist use cases, where both the entity
        references and their replacement text are compared.
      
      One use case where you might want to set this variable explicitly is: when you configure the comparator for standard 'round trip' 
      lexical preservation, but the final output format cannot represent entity references. In this case, the REPLACE value can be used. 
      This is an alternative to specifying a custom processing mode that performs round trip processing, 
      except for entity references which are substituted for their values (i.e. their replacement text) prior to the comparison.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="parameterRefGroup"/>
         <xs:attribute name="literalValue" type="advancedEntityReferenceUsageType">
      </xs:attribute>
      </xs:complexType>
  </xs:element>
   <xs:element name="CDATA" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation of CDATA sections found in the input documents.</xs:documentation>
      </xs:annotation>
  </xs:element>
   <xs:element name="comments" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation of XML comment nodes found in the input documents.</xs:documentation>
      </xs:annotation>   
  </xs:element>
   <xs:element name="defaultAttributeInfo" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls how information is preserved on DTD/Schema-defined default attributes added by the parser.</xs:documentation>
      </xs:annotation>    
  </xs:element>
   <xs:element name="entityReferences" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation of entity references found in the input documents.</xs:documentation>
      </xs:annotation>
  </xs:element>
   <xs:element name="doctype" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation of DocType declarations and the internal DTD subset.</xs:documentation>
      </xs:annotation>   
  </xs:element>
   <xs:element name="entityReplacementText" type="retainType">
      <xs:annotation>
         <xs:documentation>Controls preservation of text to be used when entities are resolved.</xs:documentation>
      </xs:annotation>     
  </xs:element>
   <xs:element name="contentModel" type="retainType">
      <xs:annotation>
         <xs:documentation>Controls preservation of DTD/Schema Element Content Model.</xs:documentation>
      </xs:annotation>     
  </xs:element>
   <xs:element name="documentLocation" type="retainType">
      <xs:annotation>
         <xs:documentation>Controls preservation of the original document location (the systemId).</xs:documentation>
      </xs:annotation>     
  </xs:element>
   <xs:element name="ignorableWhitespace" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation of whitespace identified as ignorable by a DTD or XML Schema.</xs:documentation>
      </xs:annotation>      
  </xs:element>
   <xs:element name="nestedEntityReferences" type="retainType">
      <xs:annotation>
         <xs:documentation>Controls preservation of entities references actually occurring within entities.</xs:documentation>
      </xs:annotation>   
  </xs:element>
   <xs:element name="processingInstructions" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation of XML processing-instruction nodes found in the input documents.</xs:documentation>
      </xs:annotation>     
  </xs:element>
   <xs:element name="XMLDeclaration" type="retainWithModes">
      <xs:annotation>
         <xs:documentation>Controls preservation XML declarations in the input documents.</xs:documentation>
      </xs:annotation>    
  </xs:element>
   <xs:element name="retain">
      <xs:annotation>
         <xs:documentation>Sets whether information on a lexical preservation artifact is
        preserved in the pipeline. The Java API equivalent is: 'setPreserve[artifactName]'.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="parameterRefGroup"/>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>Set true to keep information on a lexical preservation artifact.</xs:documentation>
            </xs:annotation>
         </xs:attribute>   
      </xs:complexType>
  </xs:element>
   <xs:element name="processingMode" type="processingModeType">
     <xs:annotation>
         <xs:documentation>Sets the 'PreservationProcessingMode' for controlling behaviour when preserved lexical artifacts have changed.</xs:documentation>
     </xs:annotation>
  </xs:element>
   <xs:element name="outerPiAndCommentProcessingMode" type="processingModeType">
      <xs:annotation>
         <xs:documentation>Set processingMode for processing-instructions and comments occurring before
      or after the root element.</xs:documentation>
      </xs:annotation>
  </xs:element>
   <xs:complexType name="processingModeType">
      <xs:attributeGroup ref="parameterRefGroup"/>
      <xs:attribute name="literalValue" type="processingModeEnumType">

    </xs:attribute>
  </xs:complexType>
   <xs:element name="outputType">
      <xs:annotation>
         <xs:documentation>Set the default PreservationOutputType for changes to preserved items.
      
      Used to specify how the lexically preserved items should be styled. Here, the two available styles are either 'normal' or 'encoded'. 
      A third option of 'auto' enables the specified default style to be applied. Note that when 'auto' is selected for the default style then the default style is treated as 'normal'.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="parameterRefGroup"/>
         <xs:attribute name="literalValue" type="outputTypeEnumType"/>
      </xs:complexType>
  </xs:element>
   <xs:element name="feature">
      <xs:annotation>
         <xs:documentation>
        Sets the boolean value of a named feature.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="parameterRefGroup"/>     
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
            The literal boolean value for the feature setting.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="name" use="required" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
            The fully qualitifed feature name.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
  </xs:element>
   <xs:complexType name="featureContainerType">
      <xs:sequence>
         <xs:element maxOccurs="unbounded" ref="feature"/>
      </xs:sequence>
  </xs:complexType>
   <xs:complexType name="retainWithModes">
      <xs:all>
         <xs:element ref="retain"/>
         <xs:element ref="processingMode" minOccurs="0" maxOccurs="1"/>
         <xs:element ref="outputType" minOccurs="0" maxOccurs="1"/>
      </xs:all>
  </xs:complexType>
   <xs:complexType name="retainType">
      <xs:sequence>
         <xs:element ref="retain"/>
      </xs:sequence>
  </xs:complexType>
   <xs:simpleType name="Percentage">
      <xs:restriction base="xs:integer">
         <xs:minInclusive value="0"/>
         <xs:maxInclusive value="100"/>
      </xs:restriction>
  </xs:simpleType>
   <xs:simpleType name="advancedEntityReferenceUsageType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="useDefault">
            <xs:annotation>
               <xs:documentation>Choose one of the other three behaviours in a context dependent manner.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="change">
            <xs:annotation>
               <xs:documentation>Keep the encoded form of the entity reference, with its change markup.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="replace">
            <xs:annotation>
               <xs:documentation>Extract the replacement text from the encoded entity reference.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="split">
            <xs:annotation>
               <xs:documentation>The encoded entity references have their replacement text removed and are split into 'new' and 'old' versions on detection of change.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="processingModeEnumType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="useDefault">
            <xs:annotation>
               <xs:documentation>Use the default ProcessingMode</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="A">
            <xs:annotation>
               <xs:documentation>Keep the A version</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="AB">
            <xs:annotation>
               <xs:documentation>Keep the A version if it exists, otherwise keep the B version</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="AdB">
            <xs:annotation>
               <xs:documentation>Same as A, except when handling internal subset declarations which are treated as AB</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="B">
            <xs:annotation>
               <xs:documentation>Keep the B version</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="BA">
            <xs:annotation>
               <xs:documentation>Keep the B version if it exists, otherwise keep the A version</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="BdA">
            <xs:annotation>
               <xs:documentation>Same as B, except when handling internal subset declarations which are treated as BA</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="change">
            <xs:annotation>
               <xs:documentation>Keep change information as-is</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="outputTypeEnumType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="useDefault">
            <xs:annotation>
               <xs:documentation>Specifies that the default encoding style should be used.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="encoded">
            <xs:annotation>
               <xs:documentation>The encoded preservation element should appear encoded in the output.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="normal">
            <xs:annotation>
               <xs:documentation>The encoded preservation element should be decoded by the final output transformation (which is typically part of serialisation process).</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:attributeGroup name="parameterRefGroup">
      <xs:attribute name="parameterRef" type="xs:string">
         <xs:annotation>
            <xs:documentation>Name of referenced pipelineParameter</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="xpath" type="xpathExpressionType">
         <xs:annotation>
            <xs:documentation>XPath expression returning the required type</xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:attributeGroup>
   <xs:simpleType name="xpathExpressionType">
      <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
      </xs:restriction>
  </xs:simpleType>
   <!-- //////// xsl:include of 'common-dxp.xsd' ends //////////-->

  <xs:element name="documentComparator">
      <xs:annotation>
         <xs:documentation> The root element for defining the overrides to a DocumentComparator whose
        defaults are as described in the API documentation. A Document Comparator instance with
        default settings is created if no child elements are present. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="fullDescription" minOccurs="0"/>
            <xs:element ref="pipelineParameters" minOccurs="0"/>
            <xs:element ref="extensionPoints" minOccurs="0"/>
            <xs:element ref="standardConfig" minOccurs="0"/>
            <xs:element ref="advancedConfig" minOccurs="0"/>
         </xs:all>
         <xs:attribute name="id" use="required" type="anyNameType">
            <xs:annotation>
               <xs:documentation> A unique identifier for this pipeline configuration - listed as
            'configuration id' in the command-line description. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" type="xs:string" fixed="1.0" use="required">
            <xs:annotation>
               <xs:documentation> The DCP specification version this conforms to - fixed at '1.0'
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="description" use="required" type="xs:string">
            <xs:annotation>
               <xs:documentation> Short description of this DCP configuration. </xs:documentation>
            </xs:annotation>
         </xs:attribute>

      
         <!--assertion removed for schema 1.0 variant-->
      
      

      
      </xs:complexType>
      <!--Generated keyrefs for boolean parameterRef:-->
      <xs:keyref name="booleanParameterRef" refer="booleanParameterNameIsKey">
         <xs:selector xpath="advancedConfig/parserFeatures/feature|
                   advancedConfig/transformerConfigurationProperties/booleanProperty|
                   standardConfig/calsTableConfiguration/processCalsTables|
                   standardConfig/htmlTableConfiguration/normalizeHtmlTables|
                   standardConfig/htmlTableConfiguration/processHtmlTables|
                   standardConfig/lexicalPreservation/defaults/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/CDATA/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/XMLDeclaration/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/comments/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/contentModel/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/defaultAttributeInfo/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/doctype/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/documentLocation/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/entityReferences/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/entityReplacementText/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/ignorableWhitespace/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/nestedEntityReferences/retain|
                   standardConfig/lexicalPreservation/overrides/preserveItems/processingInstructions/retain|
                   standardConfig/mathmlConfiguration/enableMathml|
                   standardConfig/outputFormatConfiguration/attributeChangeMarked|
                   standardConfig/outputFormatConfiguration/grouping|
                   standardConfig/resultReadabilityOptions/changeGatheringEnabled|
                   standardConfig/resultReadabilityOptions/detectMoves|
                   standardConfig/resultReadabilityOptions/elementSplittingEnabled|
                   standardConfig/resultReadabilityOptions/orphanedWordDetectionEnabled|
                   standardConfig/tableConfiguration/processCalsTables|
                   standardConfig/tableConfiguration/processHtmlTables"/>
         <xs:field xpath="@parameterRef"/>
      </xs:keyref>
      <!--Generated keyrefs for string parameterRef:-->
      <xs:keyref name="stringParameterRef" refer="stringParameterNameIsKey">
         <xs:selector xpath="advancedConfig/outputProperties/property|
                   advancedConfig/parserProperties/property|
                   advancedConfig/transformerConfigurationProperties/stringProperty|
                   standardConfig/calsTableConfiguration/calsValidationLevel|
                   standardConfig/calsTableConfiguration/invalidCalsTableBehaviour|
                   standardConfig/calsTableConfiguration/warningReportMode|
                   standardConfig/htmlTableConfiguration/htmlValidationLevel|
                   standardConfig/htmlTableConfiguration/invalidHtmlTableBehaviour|
                   standardConfig/htmlTableConfiguration/warningReportMode|
                   standardConfig/lexicalPreservation/defaults/outputType|
                   standardConfig/lexicalPreservation/defaults/processingMode|
                   standardConfig/lexicalPreservation/overrides/advancedEntityReferenceUsage|
                   standardConfig/lexicalPreservation/overrides/outerPiAndCommentProcessingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/CDATA/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/CDATA/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/XMLDeclaration/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/XMLDeclaration/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/comments/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/comments/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/defaultAttributeInfo/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/defaultAttributeInfo/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/doctype/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/doctype/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/entityReferences/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/entityReferences/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/ignorableWhitespace/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/ignorableWhitespace/processingMode|
                   standardConfig/lexicalPreservation/overrides/preserveItems/processingInstructions/outputType|
                   standardConfig/lexicalPreservation/overrides/preserveItems/processingInstructions/processingMode|
                   standardConfig/mathmlConfiguration/mathmlGranularity|
                   standardConfig/outputFormatConfiguration/frameMakerTcsTableChangeMode|
                   standardConfig/outputFormatConfiguration/modifiedAttributeMode|
                   standardConfig/outputFormatConfiguration/modifiedFormatOutput|
                   standardConfig/outputFormatConfiguration/orderlessPresentationMode|
                   standardConfig/outputFormatConfiguration/resultFormat|
                   standardConfig/outputFormatConfiguration/trackChangesAuthor|
                   standardConfig/outputFormatConfiguration/trackChangesDate|
                   standardConfig/outputFormatConfiguration/xmetalTcsTableChangeMode|
                   standardConfig/resultReadabilityOptions/elementSplittingThreshold|
                   standardConfig/resultReadabilityOptions/mixedContentDetectionScope|
                   standardConfig/resultReadabilityOptions/modifiedWhitespaceBehaviour|
                   standardConfig/resultReadabilityOptions/moveAttributeXpath|
                   standardConfig/resultReadabilityOptions/orphanedWordLengthLimit|
                   standardConfig/resultReadabilityOptions/orphanedWordMaxPercentage|
                   standardConfig/tableConfiguration/calsValidationLevel|
                   standardConfig/tableConfiguration/invalidCalsTableBehaviour|
                   standardConfig/tableConfiguration/warningReportMode"/>
         <xs:field xpath="@parameterRef"/>
      </xs:keyref>


      <!-- keys hard-coded in original schema: -->
      <xs:key name="anyParameterNameIsKey">
         <xs:selector xpath="pipelineParameters/*"/>
         <xs:field xpath="@name"/>
      </xs:key>

      <xs:key name="booleanParameterNameIsKey">
         <xs:selector xpath="pipelineParameters/booleanParameter"/>
         <xs:field xpath="@name"/>
      </xs:key>

      <xs:key name="stringParameterNameIsKey">
         <xs:selector xpath="pipelineParameters/stringParameter"/>
         <xs:field xpath="@name"/>
      </xs:key>

      <!-- key references hard-coded in original schema: -->
      <xs:keyref name="referencedParameterInProperty" refer="anyParameterNameIsKey">
         <xs:selector xpath="advancedConfig/*/property"/>
         <xs:field xpath="@parameterRef"/>
      </xs:keyref>

      <xs:keyref name="referencedParameterInFilterParameter"
                 refer="anyParameterNameIsKey">
         <xs:selector xpath="extensionPoints/*/filter/parameter | extensionPoints/*/*/filter/parameter"/>
         <xs:field xpath="@parameterRef"/>
      </xs:keyref>

      <xs:keyref name="_if_attributeRefToBooleanParameter"
                 refer="booleanParameterNameIsKey">
         <xs:selector xpath="extensionPoints/*/filter | extensionPoints/*/*/filter"/>
         <xs:field xpath="@if"/>
      </xs:keyref>

      <xs:keyref name="_unless_attributeRefToBooleanParameter"
                 refer="booleanParameterNameIsKey">
         <xs:selector xpath="extensionPoints/*/filter | extensionPoints/*/*/filter"/>
         <xs:field xpath="@unless"/>
      </xs:keyref>

  </xs:element>

  <xs:element name="fullDescription" type="anyMixedContent">
      <xs:annotation>
         <xs:documentation>Designed to provide meaningful description and basic help information to the
        user. It can contain PCDATA content. It should include a description of the Document
        Comparator configuration defined by the DCP. How this information is presented to users is a
        tool-dependent operation, for example a GUI-based tool may provide a pop-up
        window and show HTML formatted content.</xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:complexType name="anyMixedContent" mixed="true">
      <xs:sequence minOccurs="0">
         <xs:any maxOccurs="unbounded" processContents="lax"/>
      </xs:sequence>
  </xs:complexType>

  <xs:element name="pipelineParameters">
      <xs:annotation>
         <xs:documentation> Container for all pipeline parameters. Pipeline parameters have global
        scope and are referenced using the 'paremeterRef' attribute. Pipeline parameters have a
        default value that can be overridden through the API. The maximum number of child elements
        is not restricted. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="booleanParameter" type="booleanParameterType">
               <xs:annotation>
                  <xs:documentation> Declare a boolean parameter that may be referenced by 'parameterRef'
              attributes or as $variables from within XPath expressions. </xs:documentation>
               </xs:annotation>
            </xs:element>
            <xs:element name="stringParameter" type="stringParameterType">
               <xs:annotation>
                  <xs:documentation> Declare a string parameter that may be referenced by 'parameterRef'
              attributes or as $variables from within XPath expressions. </xs:documentation>
               </xs:annotation>
            </xs:element>
         </xs:choice>
      </xs:complexType>
  </xs:element>

  <xs:complexType name="booleanParameterType">
      <xs:sequence>
         <xs:element ref="description" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:NCName">
         <xs:annotation>
            <xs:documentation> The boolean parameter name </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="defaultValue" use="required" type="xs:boolean">
         <xs:annotation>
            <xs:documentation> The default boolean value - may be overriden externally
        </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:complexType>

  <xs:complexType name="stringParameterType">
      <xs:sequence>
         <xs:element ref="description" minOccurs="0"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:NCName">
         <xs:annotation>
            <xs:documentation> The string parameter name </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="defaultValue" use="required" type="xs:string">
         <xs:annotation>
            <xs:documentation> The default string value - may be overriden externally
        </xs:documentation>
         </xs:annotation>
      </xs:attribute>
  </xs:complexType>

  <xs:element name="description" type="xs:string">
      <xs:annotation>
         <xs:documentation>Short summary of the purpose of the parameter.</xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="extensionPoints">
      <xs:annotation>
         <xs:documentation> Declare the extension points and contained filters to be inserted within
        the DocumentComparator pipeline. In EBNF the required sequence S of child elements is:
        <ul class="plain">
               <li>S := 'inputPreFlatteningPoint'? IP 'outputExtensionPoints'?</li>
               <li>IP := 'inputExtensionPoints'? | ( 'inputAExtensionPoints'? 'inputBExtensionPoints'? )</li>
            </ul> 
         </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="inputPreFlatteningPoint" minOccurs="0"/>
            <xs:choice minOccurs="0">
               <xs:element ref="inputExtensionPoints"/>
               <xs:sequence>
                  <xs:element ref="inputAExtensionPoints" minOccurs="0"/>
                  <xs:element ref="inputBExtensionPoints" minOccurs="0"/>
               </xs:sequence>
            </xs:choice>
            <xs:element ref="outputExtensionPoints" minOccurs="0"/>
         </xs:sequence>
      </xs:complexType>
  </xs:element>

  <xs:element name="inputPreFlatteningPoint" type="filterChainType">
      <xs:annotation>
         <xs:documentation>Extension point for modifying A and B input filters, before element
        flattening.</xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="inputExtensionPoints" type="inputExtensionPointsType">
      <xs:annotation>
         <xs:documentation>Extension points for modifying A and B input filter chains, after element
        flattening.</xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="inputAExtensionPoints" type="inputExtensionPointsType">
      <xs:annotation>
         <xs:documentation>Extension points for modifying input A filter chains, after element
        flattening.</xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="inputBExtensionPoints" type="inputExtensionPointsType">
      <xs:annotation>
         <xs:documentation>Extension points for modifying input B filter chains, after element
        flattening.</xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="outputExtensionPoints" type="outputExtensionPointsType">
      <xs:annotation>
         <xs:documentation>Extension points for modifying output filter chains, after element
        flattening.</xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="standardConfig">
      <xs:annotation>
         <xs:documentation> Genaral configuration options for the DocumentComparator - see
        'advancedConfig' for further options. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="lexicalPreservation" minOccurs="0"/>
            <xs:element ref="outputFormatConfiguration" minOccurs="0"/>
            <xs:element ref="resultReadabilityOptions" minOccurs="0"/>
            <xs:element ref="tableConfiguration" minOccurs="0"/>
            <xs:element ref="calsTableConfiguration" minOccurs="0"/>
            <xs:element ref="htmlTableConfiguration" minOccurs="0"/>
            <xs:element ref="mathmlConfiguration" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>

  <xs:element name="outputFormatConfiguration">
      <xs:annotation>
         <xs:documentation>Specifies configuration options related to the format of the comparison
        result from a DocumentComparator.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="attributeChangeMarked" minOccurs="0"/>
            <xs:element ref="modifiedAttributeMode" minOccurs="0"/>
            <xs:element ref="modifiedFormatOutput" minOccurs="0"/>
            <xs:element ref="orderlessPresentationMode" minOccurs="0"/>
            <xs:element ref="resultFormat" minOccurs="0"/>
            <xs:element ref="trackChangesAuthor" minOccurs="0"/>
            <xs:element ref="trackChangesDate" minOccurs="0"/>
            <xs:element ref="xmetalTcsTableChangeMode" minOccurs="0"/>
      	     <xs:element ref="frameMakerTcsTableChangeMode" minOccurs="0"/>
      	     <xs:element ref="grouping" minOccurs="0"/>
         </xs:all>
      </xs:complexType>
  </xs:element>

  <xs:element name="attributeChangeMarked">
      <xs:annotation>
         <xs:documentation>Sets the behaviour for marking elements with an attribute changed marker -
        for cases where attribute changes can not otherwise be represented.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation> Set 'true' to mark changed attributes in output. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="modifiedAttributeMode">
      <xs:annotation>
         <xs:documentation>Determines how modified attributes are represented in the
        output.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="modifiedAttributeModeType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="modifiedFormatOutput">
      <xs:annotation>
         <xs:documentation>Sets the behaviour for outputting elements with modified
        formatting.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="modifiedFormatOutputType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="resultFormat">
      <xs:annotation>
         <xs:documentation>Specifies the format of results output from the DocumentComparator. The
        default resultFormat is 'delta'.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="resultFormatType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="trackChangesAuthor">
      <xs:annotation>
         <xs:documentation>Author name to use when generating tracked changes in the result
        document.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:string">
            <xs:annotation>
               <xs:documentation> The author name to use. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="trackChangesDate">
      <xs:annotation>
         <xs:documentation>The date-time to be used for tracked change representations, otherwise the
        current date-time is used.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:dateTime">
            <xs:annotation>
               <xs:documentation> The date-time to use - example: 2001-10-26T21:32:52 </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="xmetalTcsTableChangeMode">
      <xs:annotation>
         <xs:documentation>Specify how table changes are propagated for XMetal tracked changes
        representations, the default is down.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xmetalTableChangeModeType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
	
	  <xs:element name="frameMakerTcsTableChangeMode">
		    <xs:annotation>
			      <xs:documentation>Specify how table changes are propagated for FrameMaker tracked changes
				representations, the default is down.</xs:documentation>
		    </xs:annotation>
		    <xs:complexType>
			      <xs:attribute name="literalValue" type="frameMakerTableChangeModeType"/>
			      <xs:attributeGroup ref="parameterRefGroup"/>
		    </xs:complexType>
	  </xs:element>
	
	  <xs:element name="grouping">
		    <xs:annotation>
			      <xs:documentation>Sets the behaviour for grouping adjacent changes.</xs:documentation>
		    </xs:annotation>
		    <xs:complexType>
			      <xs:attribute name="literalValue" type="xs:boolean">
				        <xs:annotation>
					          <xs:documentation> Set 'true' to group adjacent changes in output. </xs:documentation>
				        </xs:annotation>
			      </xs:attribute>
			      <xs:attributeGroup ref="parameterRefGroup"/>
		    </xs:complexType>
	  </xs:element>
  
  <xs:element name="orderlessPresentationMode">
      <xs:annotation>
         <xs:documentation>Specifies how the child elements of 'orderless' elements should be output.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="orderlessPresentationModeType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="resultReadabilityOptions">
      <xs:annotation>
         <xs:documentation>Sets options to change the granularity and ordering of changes in the result
        in order to improve readability.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="changeGatheringEnabled" minOccurs="0"/>
            <xs:element ref="detectMoves" minOccurs="0"/>
            <xs:element ref="elementSplittingEnabled" minOccurs="0"/>
            <xs:element ref="elementSplittingThreshold" minOccurs="0"/>
            <xs:element ref="modifiedWhitespaceBehaviour" minOccurs="0"/>
            <xs:element ref="moveAttributeXpath" minOccurs="0"/>
            <xs:element ref="orphanedWordDetectionEnabled" minOccurs="0"/>
            <xs:element ref="orphanedWordLengthLimit" minOccurs="0"/>
            <xs:element ref="orphanedWordMaxPercentage" minOccurs="0"/>
            <xs:element ref="mixedContentDetectionScope" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>

  <xs:element name="changeGatheringEnabled">
      <xs:annotation>
         <xs:documentation> Sets whether to change the order of consecutive changed items to improve
        readability. If the result contains a sequence of elements whose deltaxml:deltaV2 attribute
        values are mixed up in a sequence of As and Bs, enabling this feature will cause them to be
        reordered so that they are not mixed. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>Set true to enabled change gathering</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="detectMoves">
      <xs:annotation>
         <xs:documentation> Sets the moves detection feature on or off. The move detection feature uses unique ids to identify moves.
        These unique ids can be set using the option 'moveAttributeXpath'. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>Set true to enable moves detection feature</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="elementSplittingEnabled">
      <xs:annotation>
         <xs:documentation> Sets whether modified elements containing text should be split when the
        amount of unchanged text falls below a given percentage. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>Set true to enable element splitting</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="elementSplittingThreshold">
      <xs:annotation>
         <xs:documentation> Sets the percentage of unchanged text present in a modified element below which the element will be split. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="Percentage">
            <xs:annotation>
               <xs:documentation> The threshold percentage as in integer (1 to 100) </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="modifiedWhitespaceBehaviour">
      <xs:annotation>
         <xs:documentation> Set the ModifiedWhitespaceBehaviour to use for changes to whitespace. Here,
        both documents must have some whitespace at a given point in order for there to be a change
        in whitespace. This will then be processed in accordance with the specified behaviour.
        Whitespace insertions and deletions are not affected by the modified whitespace behaviour.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="modifiedWhitespaceType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="mixedContentDetectionScope">
      <xs:annotation>
         <xs:documentation> Set the scope to use for determining if each element in the document is of a mixed-content type.
        The mixed content type affects whitespace processing. If DTD or XML Schema validation is used this setting has no effect.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="MixedContentDetectionScopeType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="moveAttributeXpath">
      <xs:annotation>
         <xs:documentation> Sets id attribute XPath to be used during moves detection. This id attribute must be an unique identifier for an element. It
        is used to identify and detect source and target for an element move. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:string">
            <xs:annotation>
               <xs:documentation>Sets id attribute XPath to be used during moves detection</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="orphanedWordDetectionEnabled">
      <xs:annotation>
         <xs:documentation> States whether or not orphaned word detection is enabled.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation> Enable/disable. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="orphanedWordLengthLimit">
      <xs:annotation>
         <xs:documentation> Sets the maximum number of words to consider for orphaned word detection.
        Sequences of words longer than the specified length will never be detected as orphaned
        words, regardless of the amount of changed words around them. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:unsignedLong"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="orphanedWordMaxPercentage">
      <xs:annotation>
         <xs:documentation> Sets the maximum proportion of the total change size that orphaned words
        can take while still being considered orphans. If the percentage value for a possibly
        orphaned section is less than or equal to this value, then it is classified as orphaned
        (unless there are more words than the length limit allows). The percentage value for a
        possibly orphaned section is calculated as follows: </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="Percentage">
            <xs:annotation>
               <xs:documentation>An integer value (1 to 100) that is the max percentage of the total
            change size were a change is considered to be orphaned.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="tableConfiguration">
      <xs:annotation>
         <xs:documentation> Specifies configuration options for table comparison. These configuration
        options can be specified on a DocumentComparator to configure its behaviour when comparing
        tables. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="warningReportMode" minOccurs="0"/>
            <xs:element ref="processHtmlTables" minOccurs="0"/>
            <xs:element ref="processCalsTables" minOccurs="0"/>
            <xs:element ref="calsValidationLevel" minOccurs="0"/>
            <xs:element ref="invalidCalsTableBehaviour" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>
  
  <xs:element name="calsTableConfiguration">
      <xs:annotation>
         <xs:documentation> Specifies configuration options for CALS table comparison. These configuration
        options can be specified on a DocumentComparator to configure its behaviour when comparing
        tables. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="warningReportMode" minOccurs="0"/>
            <xs:element ref="processCalsTables" minOccurs="0"/>
            <xs:element ref="calsValidationLevel" minOccurs="0"/>
            <xs:element ref="invalidCalsTableBehaviour" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>
  
  <xs:element name="htmlTableConfiguration">
      <xs:annotation>
         <xs:documentation> Specifies configuration options for HTML table comparison. These configuration
        options can be specified on a DocumentComparator to configure its behaviour when comparing
        tables. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="warningReportMode" minOccurs="0"/>
            <xs:element ref="processHtmlTables" minOccurs="0"/>
            <xs:element ref="htmlValidationLevel" minOccurs="0"/>
            <xs:element ref="invalidHtmlTableBehaviour" minOccurs="0"/>
            <xs:element ref="normalizeHtmlTables" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>

  <xs:element name="warningReportMode">
      <xs:annotation>
         <xs:documentation> Specifies how table invalidity warnings should be reported.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="warningReportModeType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="processHtmlTables">
      <xs:annotation>
         <xs:documentation> Sets whether the DocumentComparator should process HTML tables. HTML table
        processing is recommended as it will perform sophisticated processing when comparing two
        HTML tables to ensure that the resulting HTML table is valid. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation> Set true to enable processing of HTML tables </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="processCalsTables">
      <xs:annotation>
         <xs:documentation> Sets whether the DocumentComparator should process CALS tables. CALS table
        processing is recommended as it will perform sophisticated processing when comparing two
        CALS tables to ensure that the resulting CALS table is valid. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>Set true to enable processing of CALS tables </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="calsValidationLevel">
      <xs:annotation>
         <xs:documentation> Sets the ValidationLevel to use for CALS table validation. A value of
        ValidationLevel.STRICT will cause the InvalidTableBehaviour mode to be used for any CALS
        invalidity. A value of ValidationLevel.RELAXED means that invalidities which are known to
        have no effect on CALS processing will not prevent CALS processing from running. N.B.
        Warnings will be reported according to the WarningReportMode regardless of the setting used
        here. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="validationLevelType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="htmlValidationLevel">
      <xs:annotation>
         <xs:documentation> Sets the ValidationLevel to use for HTML table validation. A value of
        ValidationLevel.STRICT will cause the InvalidTableBehaviour mode to be used for any HTML
        invalidity. A value of ValidationLevel.RELAXED means that invalidities which are known to
        have no effect on HTML processing will not prevent HTML processing from running. N.B.
        Warnings will be reported according to the WarningReportMode regardless of the setting used
        here. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="validationLevelType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>

  <xs:element name="invalidCalsTableBehaviour">
      <xs:annotation>
         <xs:documentation> Sets the behaviour to use when inputs contain invalid CALS tables. Some of
        the processing used for CALS table comparison makes the assumption that the tables conform
        to the CALS specification. In order to avoid errors in this processing, the tables are first
        validated to ensure that it will work as expected. When tables are not valid, there are
        several options for the behaviour that the comparison should take. This enum is used to
        specify the options </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="invalidBehaviourType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="invalidHtmlTableBehaviour">
      <xs:annotation>
         <xs:documentation> Sets the behaviour to use when inputs contain invalid HTML tables. Some of
        the processing used for HTML table comparison makes the assumption that the tables conform
        to the HTML specification. In order to avoid errors in this processing, the tables are first
        validated to ensure that it will work as expected. When tables are not valid, there are
        several options for the behaviour that the comparison should take. This enum is used to
        specify the options </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="invalidBehaviourType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="normalizeHtmlTables">
      <xs:annotation>
         <xs:documentation> Sets whether the Document Comparator should normalize the specification of columns in HTML tables. 
        This setting is recommended when there is a difference between inputs of specifying columns, e.g. if one uses just
          * &lt;colgroup&gt; and another uses &lt;col&gt; without &lt;colgroup&gt;. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation> Set true to enable normalization of HTML table column specification </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="mathmlConfiguration">
      <xs:annotation>
         <xs:documentation> Specifies configuration options for MathML processing. These configuration options can be specified on a
        DocumentComparator to configure its behaviour when comparing MathML. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="enableMathml" minOccurs="0"/>
            <xs:element ref="mathmlGranularity" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>
  
  <xs:element name="enableMathml">
      <xs:annotation>
         <xs:documentation> Sets whether the DocumentComparator should use MathML-specific processing. MathML
        processing is recommended as it will use MATHML-aware features when comparing
        two MathML expressions to ensure that the result can be rendered. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="xs:boolean">
            <xs:annotation>
               <xs:documentation> Set true to enable MathML processing </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:element name="mathmlGranularity">
      <xs:annotation>
         <xs:documentation> Sets the granularity at which the differences between two MathML expressions will be represented. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="literalValue" type="mathMlGranularityType"/>
         <xs:attributeGroup ref="parameterRefGroup"/>
      </xs:complexType>
  </xs:element>
  
  <xs:simpleType name="mathMlGranularityType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="adjacent">
            <xs:annotation>
               <xs:documentation>Reports the differences by repeating A and B MathML adjacent to each other.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="detailed-adjacent">
            <xs:annotation>
               <xs:documentation>Reports the differences by repeating the A and B MathML adjacent to each other. Content within the adjacent A and B views is highlighted at the specific parts where it is different.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="inline">
            <xs:annotation>
               <xs:documentation>Reports the differences inline within the MathML without duplicating A and B. If the differences are too complex to easily render inline, the 'detailed-adjacent' view is used.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:element name="advancedConfig">
      <xs:annotation>
         <xs:documentation> Configuration options providing low-level control of the comparison, more
        general configuration options are in 'standardConfig' </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:all>
            <xs:element ref="outputProperties" minOccurs="0"/>
            <xs:element ref="parserFeatures" minOccurs="0"/>
            <xs:element ref="parserProperties" minOccurs="0"/>
            <xs:element ref="transformerConfigurationProperties" minOccurs="0"/>
         </xs:all>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
  </xs:element>

  <xs:element name="outputProperties" type="propertyContainer">
      <xs:annotation>
         <xs:documentation> Set 
        <a href="http://saxonica.com/documentation9.5/javadoc/net/sf/saxon/s9api/Serializer.Property.html?is-external=true">Serializer property</a> settings for the built in Saxon Serializer.
      </xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="parserFeatures" type="featureContainerType">
      <xs:annotation>
         <xs:documentation> Set features on the underlying SAX parser used in the pipeline. For more detail, see
        <a href="/xml-compare/current/docs/api/com/deltaxml/cores9api/PipelinedComparatorS9.html#setParserFeature(java.lang.String,%20boolean)">setParserFeature</a> in the API documentation.
      </xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="parserProperties" type="propertyContainer">
      <xs:annotation>
         <xs:documentation> Set properties on the underlying SAX parser used in the pipeline.
        For more detail, see
        <a href="/xml-compare/current/docs/api/com/deltaxml/cores9api/PipelinedComparatorS9.html#setParserProperty(java.lang.String,%20java.lang.Object)">setParserProperty</a> in the API documentation.
      </xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="transformerConfigurationProperties" type="typedPropertyContainer">
      <xs:annotation>
         <xs:documentation> Set configuration option on the Saxon XSLT transformers used in the
        pipeline. The maximum number of child elements is not restricted. </xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="filter">
      <xs:annotation>
         <xs:documentation> An XSLT or Java XML processing filter to be loaded into the
        DocumentComparator pipeline. There must be one 'class', 'http', 'resource' or 'file' child
        element for a filter element as this defines the filter type and how it is to be loaded.
        Attributes on the filter element may be used to control whether the filter is enabled or
        disabled.<br/>Child 'parameter' elements may also be added so that parameter values are passed
        on to matching parameters in the XML filter. Any number of filter elements may be added to
        an extension point, filters are processed in the pipeline in order of occurrence.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:choice>
               <xs:element ref="class"/>
               <xs:element ref="http"/>
               <xs:element ref="resource"/>
               <xs:element ref="file"/>
            </xs:choice>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="parameter"/>
         </xs:sequence>
         <xs:attribute name="if" type="xs:NCName">
            <xs:annotation>
               <xs:documentation> Enable filter when named boolean pipelineParameter is true.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="unless" type="xs:NCName">
            <xs:annotation>
               <xs:documentation> Disable filter when named boolean pipelineParameter is true.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="when" type="xs:string">
            <xs:annotation>
               <xs:documentation> Enable filter when XPath expression evaluates true. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <!--assertion removed for schema 1.0 variant-->
      </xs:complexType>
      <xs:unique name="filterParameterNameIsUnique">
         <xs:selector xpath="parameter"/>
         <xs:field xpath="@name"/>
      </xs:unique>
  </xs:element>

  <xs:element name="class">
      <xs:annotation>
         <xs:documentation> Load a Java class implementing the SAX XMLFilter interface from the
        ClassPath. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" use="required" type="anyNameType">
            <xs:annotation>
               <xs:documentation>The fully qualified name of the class.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
  </xs:element>

  <xs:element name="http">
      <xs:annotation>
         <xs:documentation> Load XSLT filter from an identified HTTP resource. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="url" use="required" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation> The URL of the HTTP resource. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
  </xs:element>

  <xs:element name="resource">
      <xs:annotation>
         <xs:documentation> Load an XSLT filter as a resource in a jar file. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" use="required" type="anyNameType">
            <xs:annotation>
               <xs:documentation> The resource name, for example, '/xsl/resource.xsl' </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
  </xs:element>

  <xs:element name="file">
      <xs:annotation>
         <xs:documentation> Load an XSLT filter from the file system. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="path" use="required" type="xs:string">
            <xs:annotation>
               <xs:documentation> The path of the filter to be loaded, relative paths are resolved
            according to the setting of the 'relBase' attribute. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="relBase" type="relBaseType"/>
      </xs:complexType>
  </xs:element>

  <!-- ///////// ELEMENTS REF'D BY STRUCTURE TYPES /////////////////// -->

  <xs:element name="property" type="simpleStringParameterType">
      <xs:annotation>
         <xs:documentation> Sets the string value of a named property </xs:documentation>
      </xs:annotation>
  </xs:element>

  <xs:element name="parameter" type="simpleStringParameterType">
      <xs:annotation>
         <xs:documentation> A named parameter to supply to a filter - any XPath-item type (including a
        sequence) can be supplied to an XSLT filter using the xpath attribute. </xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="stringProperty" type="simpleStringParameterType">
      <xs:annotation>
         <xs:documentation> A named string property </xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="booleanProperty" type="simpleBooleanParameterType">
      <xs:annotation>
         <xs:documentation> A named boolean property </xs:documentation>
      </xs:annotation>
  </xs:element>


  <!-- ///////////////////// STRUCTURE TYPES ///////////////////////// -->

  <xs:complexType name="propertyContainer">
      <xs:sequence>
         <xs:element ref="property" maxOccurs="unbounded"/>
      </xs:sequence>
  </xs:complexType>

  <xs:complexType name="typedPropertyContainer">
      <xs:choice maxOccurs="unbounded">
         <xs:element ref="stringProperty"/>
         <xs:element ref="booleanProperty"/>
      </xs:choice>
  </xs:complexType>

  <xs:complexType name="simpleStringParameterType">
      <xs:attribute name="name" use="required" type="anyNameType">
         <xs:annotation>
            <xs:documentation>The parameter name</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="literalValue" type="xs:string">
         <xs:annotation>
            <xs:documentation> The literal string value </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="parameterRefGroup"/>
  </xs:complexType>

  <xs:complexType name="simpleBooleanParameterType">
      <xs:attribute name="name" use="required" type="anyNameType">
         <xs:annotation>
            <xs:documentation>The parameter name</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="literalValue" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>The literal boolean value</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="parameterRefGroup"/>
  </xs:complexType>

  <xs:complexType name="filterChainType">
      <xs:annotation>
         <xs:documentation>Contains the set of filters to be added at a specific extension point. Note
        that there is a practical limit to the number of filters, but the schema does not constrain
        this. (Saxon 9.5 does not keep a running total of elements)</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element ref="filter" maxOccurs="unbounded"/>
      </xs:sequence>
  </xs:complexType>

  <xs:complexType name="inputExtensionPointsType">
      <xs:sequence>
         <xs:element ref="preTablePoint" minOccurs="0"/>
         <xs:element ref="postTablePoint" minOccurs="0"/>
      </xs:sequence>
      <!--assertion removed for schema 1.0 variant-->
  </xs:complexType>

  <xs:complexType name="outputExtensionPointsType">
      <xs:sequence>
         <xs:element ref="preTablePoint" minOccurs="0"/>
         <xs:element ref="postTablePoint" minOccurs="0"/>
         <xs:element name="preAttributePoint" minOccurs="0" type="filterChainType">
            <xs:annotation>
               <xs:documentation> The filter extension point after table processing and just before
            attribute processing in the DocumentComparator output pipeline. The element must be
            placed after any ...TablePoint elements. </xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="finalPoint" minOccurs="0" type="filterChainType">
            <xs:annotation>
               <xs:documentation> The final filter extension point in the DocumentComparator output
            pipeline. </xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:sequence>
      <!--assertion removed for schema 1.0 variant-->

  </xs:complexType>

  <xs:element name="preTablePoint" type="filterChainType">
      <xs:annotation>
         <xs:documentation> The filter extension point immediately before table processing. The
        preTablePoint element must be placed before the postTablePoint element. </xs:documentation>
      </xs:annotation>
  </xs:element>
  <xs:element name="postTablePoint" type="filterChainType">
      <xs:annotation>
         <xs:documentation> The filter extension point immediately after table processing.
      </xs:documentation>
      </xs:annotation>
  </xs:element>

  <!-- ///////////////////// ENUM TYPES ///////////////////////// -->
    
  <xs:simpleType name="invalidBehaviourType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="compareAsXml">
            <xs:annotation>
               <xs:documentation>Compare tables as 'plain' XML.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="fail">
            <xs:annotation>
               <xs:documentation>Throw an Exception when invalid tables are encountered.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="propagateUp">
            <xs:annotation>
               <xs:documentation>Propagate the changes to the &lt;tgroup&gt; level of the table.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="relBaseType">
      <xs:annotation>
         <xs:documentation>The relBase attribute is used to specify how the relative path to a file is resolved.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="current">
            <xs:annotation>
               <xs:documentation>Resolve using the current working directory, obtained from the Java user.dir system property.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="home">
            <xs:annotation>
               <xs:documentation>Resolve using the user's home directory.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="dxp">
            <xs:annotation>
               <xs:documentation>Resolve using the directory containing the DXP file, when it is loaded from a file.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="modifiedAttributeModeType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="useDefault">
            <xs:annotation>
               <xs:documentation>The behaviour will depend on other parameter settings, primarily the output-format.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="change">
            <xs:annotation>
               <xs:documentation>The associated modified attribute filter will be skipped, thus leaving the delta attribute change markup alone.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="A">
            <xs:annotation>
               <xs:documentation>Output the 'A' version of modified attributes and any deleted ('A') attributes.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="AB">
            <xs:annotation>
               <xs:documentation>Output the 'A' version of modified attributes.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="B">
            <xs:annotation>
               <xs:documentation>Output the 'B' version of modified attributes and any added ('B') attributes.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="BA">
            <xs:annotation>
               <xs:documentation>Output the 'B' version of modified attributes.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="encode-as-attributes">
            <xs:annotation>
               <xs:documentation>Output the 'B' version of modified attributes and any added ('B') attributes but additionally show the changes encoded as attributes in the attribute-change ('ac') namespace.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="modifiedWhitespaceType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="useDefault">
            <xs:annotation>
               <xs:documentation>The context dependent automatic whitespace setting.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="ignore">
            <xs:annotation>
               <xs:documentation>Ignore differences in whitespace that is not explicitly preserved.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="keepA">
            <xs:annotation>
               <xs:documentation>Similar to 'ignore' except that 'A' document's whitespace is kept (instead of the 'B' document's whitespace).</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="normalize">
            <xs:annotation>
               <xs:documentation>Normalize whitespace in inputs before comparison.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="show">
            <xs:annotation>
               <xs:documentation>Display the differences in whitespace where possible</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
  
  
  <xs:simpleType name="MixedContentDetectionScopeType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="document">
            <xs:annotation>
               <xs:documentation>Determine if an element is mixed-content using information from elements of the same name in the document. Using this scope significantly slows processing for large files.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="local">
            <xs:annotation>
               <xs:documentation>Determine mixed content information for each element in turn, based on the contents of that element alone.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="resultFormatType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="arbortext-tc">
            <xs:annotation>
               <xs:documentation>Reports changes using the Arbortext editor track changes format.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="delta">
            <xs:annotation>
               <xs:documentation>Reports changes using the DeltaXML delta file result.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="oxygen-tc">
            <xs:annotation>
               <xs:documentation>Reports changes using oXygen Author track changes processing instructions.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="xmetal-tc">
            <xs:annotation>
               <xs:documentation>Reports changes using XMetaL track changes processing instructions.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="framemaker-tc">
            <xs:annotation>
               <xs:documentation>Reports changes using FrameMaker track changes processing instructions.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="modifiedFormatOutputType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="useDefault">
            <xs:annotation>
               <xs:documentation>Choose the most relevant behaviour based on other configuration settings.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="A">
            <xs:annotation>
               <xs:documentation>Output the formatting elements from the A input.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="B">
            <xs:annotation>
               <xs:documentation>Output the formatting elements from the B input.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="AB">
            <xs:annotation>
               <xs:documentation>Output the A and B formatting elements. Where A and B formatting elements overlap or are nested, use formatting elements from the A input.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="BA">
            <xs:annotation>
               <xs:documentation>Output the A and B formatting elements. Where A and B formatting elements overlap or are nested, use formatting elements from the B input.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="change">
            <xs:annotation>
               <xs:documentation>Represent all formatting element changes using the deltaV2.1 format.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="content-group">
            <xs:annotation>
               <xs:documentation>Output each formatting element change using a content group.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="xmetalTableChangeModeType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="down">
            <xs:annotation>
               <xs:documentation>Changes in rows and cells are pushed down to the cell content level.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="ignore">
            <xs:annotation>
               <xs:documentation>All changes in a table are ignored.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="up">
            <xs:annotation>
               <xs:documentation>Changes in rows and cells are pushed up to the table level.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
	
	  <xs:simpleType name="frameMakerTableChangeModeType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="down">
            <xs:annotation>
               <xs:documentation>Changes in rows and cells are pushed down to the cell content level.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="ignore">
            <xs:annotation>
               <xs:documentation>All changes in a table are ignored.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="up">
            <xs:annotation>
               <xs:documentation>Changes in rows and cells are pushed up to the table level.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
  
  <xs:simpleType name="orderlessPresentationModeType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="a_adds">
            <xs:annotation>
               <xs:documentation>Outputs elements from the A input, in order, followed by elements only in the B input, in order.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="a_matches_deletes_adds">
            <xs:annotation>
               <xs:documentation>Outputs elements from both inputs in their A order, followed by elements only in A and then elements only in B.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="b_deletes">
            <xs:annotation>
               <xs:documentation>Outputs elements from the B input, in order, followed by elements only in the A input, in order.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="b_matches_adds_deletes">
            <xs:annotation>
               <xs:documentation>Outputs elements from both inputs in their B order, followed by elements only in B and then elements only in A.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="validationLevelType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="relaxed">
            <xs:annotation>
               <xs:documentation>Performs relaxed validation.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="strict">
            <xs:annotation>
               <xs:documentation>Performs strict validation.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <xs:simpleType name="warningReportModeType">
      <xs:annotation>
         <xs:documentation/>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="comments">
            <xs:annotation>
               <xs:documentation>Reports warnings using XML comments.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="message">
            <xs:annotation>
               <xs:documentation>Reports warnings using &lt;xsl:message/&gt;.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="processingInstructions">
            <xs:annotation>
               <xs:documentation>Reports warning using processing instructions with the format &lt;?dxml_warn warning content ?&gt;.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>

  <!-- ///////////////////// PRIMITIVE TYPES ///////////////////////// -->

  <xs:simpleType name="anyNameType">
      <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
      </xs:restriction>
  </xs:simpleType>

</xs:schema>
