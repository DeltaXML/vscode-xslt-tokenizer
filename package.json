{
	"name": "xslt-xpath",
	"displayName": "XSLT/XPath for Visual Studio Code",
	"description": "Comprehensive language support for XSLT 3.0 / XPath 3.1",
	"version": "1.6.5",
	"publisher": "deltaxml",
	"icon": "xslt-xpath.png",
	"bugs": {
		"url": "https://github.com/DeltaXML/vscode-xslt-tokenizer/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/DeltaXML/vscode-xslt-tokenizer"
	},
	"keywords": [
		"xml",
		"xslt",
		"xsl",
		"xpath",
		"highlighter",
		"formatter"
	],
	"engines": {
		"vscode": "^1.72.0"
	},
	"categories": [
		"Programming Languages"
	],
	"activationEvents": [
		"onLanguage:xpath",
		"onLanguage:xslt",
		"onLanguage:dcp",
		"onLanguage:sch",
		"onLanguage:xml",
		"onLanguage:bpmn",
		"onCommand:workbench.action.tasks.runTask",
		"onCommand:xslt-xpath.addTaskInputs"
	],
	"license": "MIT",
	"main": "./out/extension.js",
	"configurationDefaults": {
		"[xslt]": {
			"editor.defaultFormatter": "deltaxml.xslt-xpath",
			"editor.formatOnSaveMode": "file",
			"editor.formatOnSave": false,
			"editor.formatOnPaste": true,
			"editor.formatOnType": true,
			"editor.semanticHighlighting.enabled": true,
			"editor.detectIndentation": true,
			"editor.wordSeparators": "`~!@#%^&*()=+[{]}\\|;'\",:<>/?$",
			"editor.insertSpaces": true,
			"editor.tabSize": 2,
			"outline.showArrays": false
		},
		"[xsl]": {
			"editor.semanticHighlighting.enabled": true
		},
		"[xpath]": {
			"editor.semanticHighlighting.enabled": true
		},
		"[bpmn]": {
			"editor.semanticHighlighting.enabled": true
		}
	},
	"contributes": {
		"keybindings": [
			{
				"command": "xslt-xpath.selectCurrentElement",
				"key": "Shift+Cmd+0"
			},
			{
				"command": "xslt-xpath.selectParentElement",
				"key": "Shift+Cmd+9"
			},
			{
				"command": "xslt-xpath.selectFirstChildElement",
				"key": "Shift+Cmd+8"
			},
			{
				"command": "xslt-xpath.selectFollowingElement",
				"key": "Shift+Cmd+7"
			},
			{
				"command": "xslt-xpath.selectPrecedingElement",
				"key": "Shift+Cmd+6"
			}
		],
		"commands": [			
			{
				"command": "xslt-xpath.addTaskInputs",
				"title": "Add XSLT Inputs to Tasks File",
				"category": "XSLT"
			},
			{
				"command": "xslt-xpath.formatUnchecked",
				"title": "Format XML with newlines inside mixed-content",
				"category": "XML"
			},
			{
				"command": "xslt-xpath.gotoXPath",
				"title": "Goto XPath",
				"category": "XML"
			},
			{
				"command": "xslt-xpath.selectCurrentElement",
				"title": "Select current element",
				"category": "XML"
			},
			{
				"command": "xslt-xpath.selectPrecedingElement",
				"title": "Select preceding element",
				"category": "XML"
			},
			{
				"command": "xslt-xpath.selectFollowingElement",
				"title": "Select following element",
				"category": "XML"
			},
			{
				"command": "xslt-xpath.selectParentElement",
				"title": "Select parent element",
				"category": "XML"
			},
			{
				"command": "xslt-xpath.selectFirstChildElement",
				"title": "Select first child element",
				"category": "XML"
			}
		],
		"semanticTokenScopes": [
			{
				"scopes": {
					"xmlPunctuation": [
						"punctuation.definition.tag.xml",
						"punctuation.definition.tag.xi"
					],
					"attributeEquals": [
						"punctuation.definition.tag.xml",
						"punctuation.definition.tag.xi"
					],
					"attributeName": [
						"entity.other.attribute-name.localname.xml",
						"meta.tag.xml"
					],
					"xmlText": [
						"text.xml"
					],
					"processingInstrName": [
						"storage.type"
					],
					"attributeNameTest": [
						"variable.parameter"
					],
					"xslElementName": [
						"entity.name.tag.localname.xml",
						"storage.type"
					],
					"uriLiteral": [
						"storage.type"
					],
					"functionNameTest": [
						"variable.other.constant"
					],
					"anonymousFunction": [
						"variable.other.constant"
					]
				}
			}
		],
		"configuration": {
			"title": "XSLT/XPath",
			"properties": {
				"XSLT.tasks.saxonJar": {
					"type": "string",
					"description": "Path of the installed Saxon jar file"
				},
				"XSLT.tasks.htmlParserJar": {
					"type": "string",
					"markdownDescription": "(XSLT 4.0) File-path of installed nu.validator or htmlparser jar file - downloadable 'bundle' from: [MVN Repository HtmlParser](https://mvnrepository.com/artifact/nu.validator.htmlparser/htmlparser/1.4)"
				},
				"XSLT.tasks.java.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable Saxon Tasks"
				},
				"XSLT.tasks.js.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable Saxon-JS Tasks"
				},
				"XSLT.resources.useSourceFile": {
					"description": "Control how completion-list for XPath node names is populated",
					"type": [
						"string"
					],
					"enum": [
						"none",
						"latest"
					],
					"default": "latest"
				},
				"XSLT.resources.xsltPackages": {
					"description": "Associate file paths with xsl:package names",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"description": "XSLT Package Name"
							},
							"version": {
								"type": "string",
								"description": "XSLT Package Version"
							},
							"path": {
								"type": "string",
								"description": "Path to named XSLT Package"
							}
						},
						"required": [
							"name",
							"path"
						]
					}
				}
			}
		},
		"taskDefinitions": [
			{
				"type": "xslt",
				"required": [
					"label",
					"xsltFile",
					"xmlSource",
					"resultPath",
					"saxonJar"
				],
				"properties": {
					"label": {
						"type": "string",
						"description": "The user interface label. Change this to uniquely identify the task"
					},
					"saxonJar": {
						"type": "string",
						"description": "`Path of the installed Saxon jar file"
					},
					"xsltFile": {
						"type": "string",
						"description": "The path to the XSLT stylesheet"
					},
					"xmlSource": {
						"type": "string",
						"description": "The path to the XML source file"
					},
					"initialTemplate": {
						"type": "string",
						"description": "The named template to be executed. Namespaced templates can be written as {uri}localname. Default is xsl:initial-template"
					},
					"initialMode": {
						"type": "string",
						"description": "The initial mode for the transformation. Namespaced modes can be written as {uri}localname"
					},
					"resultPath": {
						"type": "string",
						"description": "The destination path for the XSLT result"
					},
					"catalogFilenames": {
						"type": "string",
						"description": "Either a file name or a list of file names separated by semicolons; the files are OASIS XML catalogs defining how public identifiers and system identifiers (URIs) are to be redirected"
					},
					"configFilename": {
						"type": "string",
						"description": "If set, configuration properties (unless overridden by other properties here) are taken from the supplied configuration file."
					},
					"dtd": {
						"type": "string",
						"enum": [
							"on",
							"off"
						],
						"description": "Requests DTD-based validation of the source file and of any files read using the document() function"
					},
					"enableAssertions": {
						"type": [
							"string"
						],
						"enum": [
							"on",
							"off",
							"recover"
						],
						"description": "Enables assertions both at compile time and at run time"
					},
					"allowSyntaxExtensions40": {
						"type": [
							"string"
						],
						"enum": [
							"on",
							"off"
						],
						"description": "Enables experimental XPath 4.0 extensions. See: https://www.saxonica.com/documentation11/index.html#!v4extensions"
					},
					"expandValues": {
						"type": "string",
						"enum": [
							"on",
							"off"
						],
						"description": "Specifying 'off' suppresses expansion of DTD/Schema fixed or default values"
					},
					"explainFilename": {
						"type": [
							"string"
						],
						"description": "Writes an execution plan and other diagnostic information for the stylesheet to the specified filename"
					},
					"exportFilename": {
						"type": "string",
						"description": "Export filename: If set, exports the compiled stylesheet, in a form suitable for subsequent execution"
					},
					"traceOutFilename": {
						"type": "string",
						"description": "Display stylesheet tracing information using the class name supplied. An empty-string causes a system-supplied traceListener to be used."
					},
					"traceListener": {
						"type": "string",
						"description": "Indicates that the output of the trace() function should be directed to a specified file"
					},
					"timing": {
						"type": "string",
						"enum": [
							"on",
							"off"
						],
						"description": "Display version and timing information to the standard error output"
					},
					"messageEscaping": {
						"type": "string",
						"enum": [
							"adaptive",
							"on",
							"off"
						],
						"description": "Set to 'adaptive' to disable escaping of XML characters in xsl:message output when Saxon Jar version permits "
					},
					"execute": {
						"type": "boolean",
						"description": "Default: 'true'. If set 'false' any -export output is generated but XSLT is not executed"
					},
					"TPfilename": {
						"type": "string",
						"description": "Filename target for trace profile information to be sent"
					},
					"TPxslFilename": {
						"type": "string",
						"description": "Stylesheet filename to be used to format the result with the -TP option set"
					},
					"parameters": {
						"description": "The xsl:param values for the XSLT",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "The xsl:param name.\nNamespaced params are written as {uri}localname.\nSpecial prefix characters are:\n'?' (XPath)\n'!' (xsl:output)\n'+' (filename):\nSee: http://www.saxonica.com/documentation/index.html#!using-xsl/commandline"
								},
								"value": {
									"type": "string",
									"description": "The xsl:param value. "
								}
							},
							"required": [
								"name",
								"value"
							]
						},
						"minItems": 1
					},
					"features": {
						"description": "Set a feature defined in the Saxon Configuration interface. See https://www.saxonica.com/documentation11/index.html#!configuration/config-features",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "The feature name - the last part of the Configuration name after the '/' char (name may have a uri suffix). E.g. for 'http://saxon.sf.net/feature/parserFeature?uri=' enter  'parserFeature?uri='"
								},
								"value": {
									"type": "string",
									"description": "The value for the given feature"
								}
							},
							"required": [
								"name",
								"value"
							]
						},
						"minItems": 1
					},
					"classPathEntries": {
						"description": "Add Java extension libraries to the classpath",
						"type": "array",
						"items": {
							"type": "string"
						},
						"minItems": 1
					},
					"group": {
						"type": "object",
						"properties": {
							"kind": {
								"type": "string",
								"description": "The kind of task. E.g. 'build'"
							}
						}
					}
				}
			},
			{
				"type": "xslt-js",
				"required": [
					"label",
					"xsltFile",
					"xmlSource",
					"resultPath"
				],
				"properties": {
					"label": {
						"type": "string",
						"description": "The user interface label. Change this to uniquely identify the task"
					},
					"nodeModulesFolder": {
						"type": "string",
						"description": "[No longer used] The path of the node_modules folder"
					},
					"xsltFile": {
						"type": "string",
						"description": "The path to the XSLT stylesheet"
					},
					"xmlSource": {
						"type": "string",
						"description": "The path to the XML/JSON file (for JSON - set 'useJsonSource')"
					},
					"useJsonSource": {
						"type": "boolean",
						"default": true,
						"description": "To supply a JSON file in the 'xmlSource' property"
					},
					"unprefixedElementNames": {
                        "type": "string",
						"enum": [
							"##html5"
						],
						"description": "##html5 declares an unprefixed element will match either a name in the XHTML namespace, or a name in no namespace"
					},
					"initialTemplate": {
						"type": "string",
						"description": "The named template to be executed. Namespaced templates can be written as {uri}localname. Default is xsl:initial-template"
					},
					"initialMode": {
						"type": "string",
						"description": "The initial mode for the transformation. Namespaced modes can be written as {uri}localname"
					},
					"export": {
						"type": "string",
						"description": "Export filename: If set, exports the compiled stylesheet, in a form suitable for subsequent execution"
					},
					"execute": {
						"type": "boolean",
						"description": "Default: 'true'. If set 'false' any -export output is generated but XSLT is not executed"
					},
					"relocate": {
						"type": "string",
						"enum": [
							"on",
							"off"
						],
						"description": "When set 'on' and 'export', operations like doc() will be relative to the the SEF file location when it was loaded"
					},
					"resultPath": {
						"type": "string",
						"description": "The destination path for the XSLT result"
					},
					"timing": {
						"type": "string",
						"enum": [
							"on",
							"off"
						],
						"description": "Display version and timing information to the standard error output"
					},
					"parameters": {
						"description": "The xsl:param values for the XSLT",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "The xsl:param name. Namespaced params can be written as {uri}localname"
								},
								"value": {
									"type": "string",
									"description": "The xsl:param value. Special leading characters are: '?' (XPath), '!' (xsl:output), '+' (filename): See: http://www.saxonica.com/documentation/index.html#!using-xsl/commandline"
								}
							},
							"required": [
								"name",
								"value"
							]
						},
						"minItems": 1
					},
					"group": {
						"type": "object",
						"properties": {
							"kind": {
								"type": "string",
								"description": "The kind of task. E.g. 'build'"
							}
						}
					}
				}
			}
		],
		"problemMatchers": [
			{
				"name": "saxon-xslt",
				"owner": "xslt",
				"fileLocation": [
					"relative",
					"${file}/.."
				],
				"pattern": [
					{
						"regexp": "^(?:Syntax |Static |Dynamic |Type )?(error|Error|Warning|Info)\\s+(?:at.*in.*\\sin|in|on|at|near\\s+.*.*)(?:\\s+)?([^\\s]*)(?:\\s+on)?\\s+line\\s+(\\d+)\\s+column\\s+(\\d+)\\s+of\\s+([^:]*)",
						"line": 3,
						"column": 4,
						"severity": 1,
						"file": 5
					},
					{
						"regexp": "^\\s+(\\w{4}\\d{4})(?::)?\\s+(.*)",
						"code": 1,
						"message": 2
					}
				]
			},
			{
				"name": "saxon-xslt-js",
				"owner": "xslt-js",
				"fileLocation": [
					"relative",
					"${file}/.."
				],
				"pattern": [
					{
						"regexp": "^s*"
					},
					{
						"regexp": "^.*(Error|Warning|Info)\\s+([^\\s]+)\\s+at\\s+([^#]+)#(\\d+)",
						"line": 4,
						"severity": 1,
						"code": 2,
						"file": 3
					},
					{
						"regexp": "^(.*)",
						"message": 1
					}
				]
			},
			{
				"name": "saxon-xslt.workspace",
				"owner": "xslt",
				"fileLocation": [
					"relative",
					"${workspaceFolder}"
				],
				"pattern": [
					{
						"regexp": "^(?:Syntax |Static |Dynamic |Type )?(error|Error|Warning|Info)\\s+(?:at.*in.*\\sin|in|on|at|near\\s+.*.*)(?:\\s+)?([^\\s]*)(?:\\s+on)?\\s+line\\s+(\\d+)\\s+column\\s+(\\d+)\\s+of\\s+([^:]*)",
						"line": 3,
						"column": 4,
						"severity": 1,
						"file": 5
					},
					{
						"regexp": "^\\s+(\\w{4}\\d{4})(?::)?\\s+(.*)",
						"code": 1,
						"message": 2
					}
				]
			},
			{
				"name": "saxon-xslt.workspace.src",
				"owner": "xslt",
				"fileLocation": [
					"relative",
					"${workspaceFolder}/src"
				],
				"pattern": [
					{
						"regexp": "^(?:Syntax |Static |Dynamic |Type )?(error|Error|Warning|Info)\\s+(?:at.*in.*\\sin|in|on|at|near\\s+.*.*)(?:\\s+)?([^\\s]*)(?:\\s+on)?\\s+line\\s+(\\d+)\\s+column\\s+(\\d+)\\s+of\\s+([^:]*)",
						"line": 3,
						"column": 4,
						"severity": 1,
						"file": 5
					},
					{
						"regexp": "^\\s+(\\w{4}\\d{4})(?::)?\\s+(.*)",
						"code": 1,
						"message": 2
					}
				]
			},
			{
				"name": "saxon-xslt.workspace.src.xsl",
				"owner": "xslt",
				"fileLocation": [
					"relative",
					"${workspaceFolder}/src/xsl"
				],
				"pattern": [
					{
						"regexp": "^(?:Syntax |Static |Dynamic |Type )?(error|Error|Warning|Info)\\s+(?:at.*in.*\\sin|in|on|at|near\\s+.*.*)(?:\\s+)?([^\\s]*)(?:\\s+on)?\\s+line\\s+(\\d+)\\s+column\\s+(\\d+)\\s+of\\s+([^:]*)",
						"line": 3,
						"column": 4,
						"severity": 1,
						"file": 5
					},
					{
						"regexp": "^\\s+(\\w{4}\\d{4})(?::)?\\s+(.*)",
						"code": 1,
						"message": 2
					}
				]
			},
			{
				"name": "saxon-xslt.workspace.resources.xsl",
				"owner": "xslt",
				"fileLocation": [
					"relative",
					"${workspaceFolder}/resources/xsl"
				],
				"pattern": [
					{
						"regexp": "^(?:Syntax |Static |Dynamic |Type )?(error|Error|Warning|Info)\\s+(?:at.*in.*\\sin|in|on|at|near\\s+.*.*)(?:\\s+)?([^\\s]*)(?:\\s+on)?\\s+line\\s+(\\d+)\\s+column\\s+(\\d+)\\s+of\\s+([^:]*)",
						"line": 3,
						"column": 4,
						"severity": 1,
						"file": 5
					},
					{
						"regexp": "^\\s+(\\w{4}\\d{4})(?::)?\\s+(.*)",
						"code": 1,
						"message": 2
					}
				]
			}
		],
		"problemPatterns": [
			{
				"name": "error.line",
				"regexp": "^(?:Syntax |Static |Dynamic |Type )?(error|Error|Warning|Info)\\s+(?:at.*in.*\\sin|in|on|at|near\\s+.*.*)(?:\\s+)?([^\\s]*)(?:\\s+on)?\\s+line\\s+(\\d+)\\s+column\\s+(\\d+)\\s+of\\s+([^:]*)",
				"line": 3,
				"column": 4,
				"severity": 1,
				"file": 5
			},
			{
				"name": "message.line",
				"regexp": "^\\s+(\\w{4}\\d{4})(?::)?\\s+(.*)",
				"code": 1,
				"message": 2
			}
		],
		"semanticTokenTypes": [
			{
				"id": "attributeNameTest",
				"superType": "struct",
				"description": "An attribute node test in a step expression"
			},
			{
				"id": "nodeNameTest",
				"superType": "class",
				"description": "A node test in a step expression"
			},
			{
				"id": "mapNameLookup",
				"superType": "class",
				"description": "A map key following the '?' lookup operator"
			},
			{
				"id": "uriLiteral",
				"superType": "struct",
				"description": "A URI literal of the form: Q{uri}"
			},
			{
				"id": "nodeType",
				"superType": "parameter",
				"description": "type of node, e.g. element()"
			},
			{
				"id": "simpleType",
				"superType": "parameter",
				"description": "type of value, e.g. xs:integer"
			},
			{
				"id": "axisName",
				"superType": "label",
				"description": "XPath axis, e.g. descendant::"
			},
			{
				"id": "complexExpression",
				"superType": "keyword",
				"description": "multi-part expression keyword, e.g. let,:=,return"
			},
			{
				"id": "attributeName",
				"superType": "variable",
				"description": "XML attribute name"
			},
			{
				"id": "xmlnsName",
				"superType": "comment",
				"description": "First part of an XML Namespace Declaration"
			},
			{
				"id": "attributeValue",
				"superType": "string",
				"description": "XML attribute value"
			},
			{
				"id": "elementName",
				"superType": "class",
				"description": "XML element name"
			},
			{
				"id": "elementValue",
				"superType": "string",
				"description": "XML element text node"
			},
			{
				"id": "processingInstrName",
				"superType": "struct",
				"description": "Processing Instruction name"
			},
			{
				"id": "processingInstrValue",
				"superType": "event",
				"description": "Processing Instruction value"
			},
			{
				"id": "entityRef",
				"superType": "function",
				"description": "XML Entity Reference - e.g. '&lt;'"
			},
			{
				"id": "anonymousFunction",
				"superType": "struct",
				"description": "Declaration of anonymous XPath Function"
			},
			{
				"id": "functionNameTest",
				"superType": "struct",
				"description": "Reference to an XPath Function - e.g. my:test#1"
			},
			{
				"id": "xmlComment",
				"superType": "comment",
				"description": "XML Comment"
			},
			{
				"id": "xslElementName",
				"superType": "struct",
				"description": "Name of XSLT Element"
			},
			{
				"id": "xmlPunctuation",
				"superType": "comment",
				"description": "XML angle-brackets etc."
			},
			{
				"id": "xmlText",
				"superType": "number",
				"description": "XML Text Node"
			},
			{
				"id": "dtd",
				"superType": "class",
				"description": "XML DTD Declaration"
			},
			{
				"id": "dtdEnd",
				"superType": "class",
				"description": "End of XML DTD Declaration"
			},
			{
				"id": "mapKey",
				"superType": "keyword",
				"description": "The key of a map-entry"
			},
			{
				"id": "attributeEquals",
				"superType": "macro",
				"description": "XML attribute value assignment"
			}
		],
		"languages": [
			{
				"id": "xpath",
				"aliases": [
					"XPath",
					"xpath"
				],
				"extensions": [
					".xpath"
				],
				"configuration": "./language-configuration.json"
			},
			{
				"id": "xslt",
				"aliases": [
					"XSLT",
					"xslt"
				],
				"extensions": [
					".xsl",
					".xslt"
				],
				"configuration": "./xsl-language-configuration.json"
			},
			{
				"id": "dcp",
				"aliases": [
					"DCP",
					"dcp"
				],
				"extensions": [
					".dcp"
				],
				"configuration": "./language-configuration.json"
			},
			{
				"id": "sch",
				"aliases": [
					"Schematron",
					"sch"
				],
				"extensions": [
					".sch"
				],
				"configuration": "./language-configuration.json"
			},
			{
				"id": "bpmn",
				"aliases": [
					"BPMN",
					"bpmn"
				],
				"extensions": [
					".bpmn2",
					".bpmn",
					".bpmn20.xml"
				]
			},
			{
				"id": "xml",
				"aliases": [
					"XML",
					"xml"
				],
				"extensions": [
					".xml",
					".xsd",
					".ascx",
					".atom",
					".axml",
					".cpt",
					".csl",
					".csproj",
					".csproj.user",
					".dita",
					".ditamap",
					".docbook",
					".dtml",
					".fsproj",
					".fxml",
					".iml",
					".isml",
					".jmx",
					".launch",
					".menu",
					".mxml",
					".nuspec",
					".opml",
					".owl",
					".proj",
					".props",
					".pt",
					".publishsettings",
					".pubxml",
					".pubxml.user",
					".rbxlx",
					".rbxmx",
					".rdf",
					".rng",
					".rss",
					".shproj",
					".storyboard",
					".svg",
					".targets",
					".tld",
					".tmx",
					".vbproj",
					".vbproj.user",
					".vcxproj",
					".vcxproj.filters",
					".wsdl",
					".wxi",
					".wxl",
					".wxs",
					".xaml",
					".xbrl",
					".xbl",
					".xib",
					".xlf",
					".xliff",
					".xpdl",
					".xul",
					".xoml"
				]
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"lint": "eslint -c .eslintrc.js --ext .ts src",
		"lint-fix": "eslint -c .eslintrc.js --fix --ext .ts src",
		"watch": "tsc -watch -p ./",
		"test": "jest"
	},
	"devDependencies": {
		"@types/jest": "^24.9.1",
		"@types/node": "^10.17.17",
		"@types/vscode": "^1.72.0",
		"@typescript-eslint/eslint-plugin": "^5.4.0",
		"@typescript-eslint/parser": "^5.4.0",
		"eslint": "^8.2.0",
		"eslint-config-prettier": "^8.3.0",
		"jest": "^26.6.3",
		"prettier": "^2.4.1",
		"ts-jest": "^26.5.6",
		"tslint": "^5.20.1",
		"typescript": "^4.9.4",
		"xslt3": "^2.0.3"
	},
	"dependencies": {
		"jsonc-parser": "^3.0.0"
	}
}
